U <- runif(10000, 0, c * 0.1)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])/(c*dunif(X[count],0,10))
print(IGW_pdf(X[count]))
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, 0, 10)
U <- runif(10000, 0, c * 0.1)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
print(test_x)
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
print(test_x)
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(U)
c = 1
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, 0, 10)
U <- runif(10000, 0, c * 0.1)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
print(test_x)
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
max(U)
hist(accept)
truehist(accept)
c = 5
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, 0, 10)
U <- runif(10000, 0, c * 0.1)
max(U)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
print(test_x)
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
max(U)
max(IGW_pdf(X))
max(X)
max(accept)
?truehist
#####################################
#Rejection Sampling
#####################################
beta = 2
lambda = 4
alpha = 0.5
c = 1.2
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, 0, 10)
U <- runif(10000, 0, c * 0.1)
max(X)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
print(test_x)
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(accept)
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
#####################################
#Rejection Sampling
#####################################
beta = 2
lambda = 4
alpha = 2
c = 1.2
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, 0, 10)
U <- runif(10000, 0, c * 0.1)
max(X)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
print(test_x)
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(accept)
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
c = 0.335
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, 0, 10)
U <- runif(10000, 0, c * 0.1)
max(X)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
print(test_x)
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(accept)
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
c = 3.35
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, 0, 10)
U <- runif(10000, 0, c * 0.1)
max(X)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
print(test_x)
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(accept)
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
#####################################
#Rejection Sampling
#####################################
beta = 2
lambda = 4
alpha = 2
c = 0.335 #f(x) / g(x)
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, 0, 10)
U <- runif(10000, 0, 10)
max(X)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])/(c * dnorm(X[count],0,1))
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(accept)
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])/(c * dnorm(X[count],0,10))
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(accept)
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])/(c * dunif(X[count],0,10))
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(accept)
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
alpha = 0.5
c = 0.12 #f(x) / g(x)
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, 0, 10)
U <- runif(10000, 0, 10)
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])/(c * dunif(X[count],0,10))
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(accept)
truehist(accept)
curve(IGW_pdf, 0, 10, add = TRUE)
beta = 2
lambda = 4
alpha = 0.5
c = 1.2 #f(x) / g(x)
a = 0
b = 10
IGW_pdf <- function(x) {
return (alpha * beta * lambda^beta * x^(-(beta+1)) * exp(-(lambda/x)^beta) * (1-exp(-(lambda/x)^beta))^(alpha-1))
}
curve(IGW_pdf, 0, 10)
X <- runif(10000, a, b)
U <- runif(10000, 0, c * (1/(b-a)))
count = 1
accept = c()
while (count <= 10000) {
test_u = U[count]
test_x = IGW_pdf(X[count])
if (test_u <= test_x) {
accept = rbind(accept, X[count])
count = count + 1
}
count = count + 1
}
max(accept)
truehist(accept)
curve(IGW_pdf, a, b, add = TRUE)
source("IGW_Data_Generater_function.R")
source("alpha_hat_generater_function.R")
#Still working on!
#problem: the output for N is greater than 1000 don't know if this is usual or not
delta <- 0.1
beta = 2
lambda = 4
alpha = 2
a = 0
b = 10
n = 10000
m <- 5
N_generater <- function(delta, beta, lambda, alpha,a, b, n, size) {
count <- 1
result <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(result) <- c("N","Estimate")
while (count <= size) {
X <- IGW_Data_Generater(beta,lambda,alpha,a,b,n)
for (i in 5:3000) {
alpha_hat <- alpha_hat_generater(X[1:i],beta,lambda)
print(X[1:i])
estimate <- delta^(-1/2)*sqrt((0.25*delta^(-1)*alpha_hat^(4))
+(3.5*alpha_hat)
+(0.25*delta)) + 0.5*delta^(-1)*alpha_hat^(2) + 1
if (i >= estimate) {
accept <- c(i, estimate)
result[nrow(result) + 1,] <- accept
break
}
}
count = count + 1
}
return(result)
}
result <- N_generater(delta,beta,lambda,alpha,a,b,n,1000)
source("IGW_Data_Generater_function.R")
ionosphere_data <- read.csv("http://archive.ics.uci.edu/ml/machine-learning-databases/ionosphere/ionosphere.data", header = FALSE)
View(ionosphere_data)
table(ionosphere_data)
table(ionosphere_data$V35)
library(smoother)
install.packages("smoother")
y = runif(100)
ys = smth.gaussian(y)
ys = smooth.gaussian(y)
?smoother
??smoother
?smth.gaussian
?smth
library(smoother)
?smth
ys = smth.gaussian(y)
library(smoother)
y = runif(100)
ys = smth.gaussian(y)
ys
library(readr)
library(readxl)
library(tidyverse)
library(lubridate)
library(ggplot2)
#############################
#Real Estate data analysis
#############################
#Real Estate Data from 2001 to 2020 with twon data
Real_Estate_Sales_2001_2020_GL <- read_csv("Data/Real_Estate_Sales_2001-2020_GL.csv",
col_types = cols(`Date Recorded` = col_date(format = "%m/%d/%Y")))
library(readr)
library(readxl)
library(tidyverse)
library(lubridate)
library(ggplot2)
#############################
#Real Estate data analysis
#############################
#Real Estate Data from 2001 to 2020 with twon data
Real_Estate_Sales_2001_2020_GL <- read_csv("Data/Real_Estate_Sales_2001-2020_GL.csv",
col_types = cols(`Date Recorded` = col_date(format = "%m/%d/%Y")))
View(House.Covid)
setwd("~/Desktop/TextEditor/RStudio/HousingPricePredictionProject")
library(readr)
library(readxl)
library(tidyverse)
library(lubridate)
library(ggplot2)
#############################
#Real Estate data analysis
#############################
#Real Estate Data from 2001 to 2020 with twon data
Real_Estate_Sales_2001_2020_GL <- read_csv("Data/Real_Estate_Sales_2001-2020_GL.csv",
col_types = cols(`Date Recorded` = col_date(format = "%m/%d/%Y")))
Real_Estate_Sales_new <- Real_Estate_Sales_2001_2020_GL %>% drop_na(Town)
CT_County_Town <- read_excel("Data/CT_County_Town.xlsx")
Tolland <- CT_County_Town %>% filter(County == "Tolland") %>% dplyr::select("Town name")
New_Haven <- CT_County_Town %>% filter(County == "New Haven") %>% dplyr::select("Town name")
Windham <- CT_County_Town %>% filter(County == "Windham") %>% dplyr::select("Town name")
Fairfield <- CT_County_Town %>% filter(County == "Fairfield") %>% dplyr::select("Town name")
Hartford <- CT_County_Town %>% filter(County == "Hartford") %>% dplyr::select("Town name")
Litchfield <- CT_County_Town %>% filter(County == "Litchfield") %>% dplyr::select("Town name")
Middlesex <- CT_County_Town %>% filter(County == "Middlesex") %>% dplyr::select("Town name")
New_London <- CT_County_Town %>% filter(County == "New London") %>% dplyr::select("Town name")
Real.Estate.Tolland <- Real_Estate_Sales_new %>% filter(Town %in% Tolland$`Town name`) %>% mutate(County = "Tolland")
Real.Estate.New.Haven <- Real_Estate_Sales_new %>% filter(Town %in% New_Haven$`Town name`) %>% mutate(County = "New Haven")
Real.Estate.Windham <- Real_Estate_Sales_new %>% filter(Town %in% Windham$`Town name`) %>% mutate(County = "Windham")
Real.Estate.Fairfield <- Real_Estate_Sales_new %>% filter(Town %in% Fairfield$`Town name`) %>% mutate(County = "Fairfield")
Real.Estate.Hartford <- Real_Estate_Sales_new %>% filter(Town %in% Hartford$`Town name`) %>% mutate(County = "Hartford")
Real.Estate.Litchfield <- Real_Estate_Sales_new %>% filter(Town %in% Litchfield$`Town name`) %>% mutate(County = "Litchfield")
Real.Estate.Middlesex <- Real_Estate_Sales_new %>% filter(Town %in% Middlesex$`Town name`) %>% mutate(County = "Middlesex")
Real.Estate.New.London <- Real_Estate_Sales_new %>% filter(Town %in% New_London$`Town name`) %>% mutate(County = "New London")
Real.Estate.County <- rbind(Real.Estate.Tolland,
Real.Estate.New.Haven,
Real.Estate.Windham,
Real.Estate.Fairfield,
Real.Estate.Hartford,
Real.Estate.Litchfield,
Real.Estate.Middlesex,
Real.Estate.New.London)
# Real.Estate.Tolland <- Real.Estate.County %>% filter(Town %in% Tolland$`Town name`) %>% mutate(County = "Tolland")
# nrow(Real.Estate.Tolland)
# View(Real.Estate.Tolland)
Covid_start_date <- as.Date("2020-01-01")
Real.Estate.County <- Real.Estate.County %>%
filter(`Date Recorded` > Covid_start_date) %>%
mutate(Month = months(`Date Recorded`),
Year = year(`Date Recorded`))
Real.Estate.County$Month <- factor(Real.Estate.County$Month,
levels=c("January",
"February",
"March",
"April",
"May",
"June",
"July",
"August",
"September",
"October",
"November",
"December"),
ordered=TRUE)
Real.Estate.County$Year <- as.factor(Real.Estate.County$Year)
Real.Estate.County <- Real.Estate.County %>% filter(`Sale Amount` <= 4e+09)
View(Real.Estate.County)
Real.Estate.County$mon_yr = format(Real.Estate.County$`Date Recorded`, "%Y-%m")
Real.Estate.County.Median <- Real.Estate.County %>%
group_by(County, mon_yr, `Property Type`, `Residential Type`) %>%
summarise(Sale_median=(median(`Sale Amount`)))
Real.Estate.County.Median <- na.omit(Real.Estate.County.Median)
View(Real.Estate.County.Median)
#############################
#COVID 19 data analysis
#############################
COVID.19.County <- read_csv("Data/COVID-19_Cases__Hospitalizations__and_Deaths__By_County__-_ARCHIVE.csv",
col_types = cols(`Date updated` = col_date(format = "%m/%d/%Y")))
COVID.19.County <- COVID.19.County %>%
mutate(Month = months(`Date updated`),
Year = year(`Date updated`))
COVID.19.County$County <- as.factor(COVID.19.County$County)
COVID.19.County$Month <- factor(COVID.19.County$Month,
levels=c("January",
"February",
"March",
"April",
"May",
"June",
"July",
"August",
"September",
"October",
"November",
"December"),
ordered=TRUE)
COVID.19.County$mon_yr = format(COVID.19.County$`Date updated`, "%Y-%m")
begin_month <- COVID.19.County %>% group_by(mon_yr) %>% filter(`Date updated` == min(`Date updated`))
end_month <- COVID.19.County %>% group_by(mon_yr) %>% filter(`Date updated` == max(`Date updated`))
merge_data <- merge(begin_month, end_month, by=c("mon_yr", "County","County code","Month","Year"))
merge.data.case.per.month <- merge_data %>% dplyr::select(c("County","Month","Year","Total cases.x","Total cases.y","mon_yr"))
merge.data.case.per.month <- merge.data.case.per.month %>% mutate(`Total Case` = `Total cases.y`-`Total cases.x` )
Covid.19.Month.Cases <- merge.data.case.per.month %>% dplyr::select(c("County","Month","Year","mon_yr", "Total Case"))
View(Covid.19.Month.Cases)
#merge.data.case.per.month$mon_yr <- as.Date(paste(merge.data.case.per.month$mon_yr,"-01",sep=""))
House.Covid <- merge(Real.Estate.County.Median, Covid.19.Month.Cases, by=c("mon_yr","County"))
House.Covid$County <- factor(House.Covid$County)
House.Covid$`Property Type` <- factor(House.Covid$`Property Type`)
House.Covid$`Residential Type` <- factor(House.Covid$`Residential Type`)
lm(House.Covid$Sale_median~House.Covid$`Total Case`*House.Covid$`Total Case`*House.Covid$`Total Case` - House.Covid$`Total Case` - 1)
x <- lm(House.Covid$Sale_median~House.Covid$`Total Case`*House.Covid$`Total Case`*House.Covid$`Total Case` - House.Covid$`Total Case` - 1)
summary(x)
x <- lm(House.Covid$Sale_median~House.Covid$`Total Case` - House.Covid$`Property Type`)
summary(x)
x <- lm(House.Covid$Sale_median~House.Covid$`Property Type` - House.Covid$`Property Type`)
summary(x)
x <- lm(House.Covid$Sale_median~House.Covid$`Property Type` * House.Covid$`Property Type`)
summary(x)
x <- lm(House.Covid$Sale_median~House.Covid$`Property Type` * House.Covid$`Property Type` + House.Covid$`Residential Type`)
summary(x)
is.integer(House.Covid$Sale_median)
